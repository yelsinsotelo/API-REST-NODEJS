"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _App = _interopRequireDefault(require("./App"));

require("./config/database");

var _AppMqtt = _interopRequireDefault(require("./AppMqtt"));

var _base64url = _interopRequireDefault(require("base64url"));

var _ip = _interopRequireDefault(require("ip"));

var _http = _interopRequireDefault(require("http"));

var _socket = _interopRequireDefault(require("socket.io"));

var _Users = _interopRequireDefault(require("./models/migrations/Users"));

var _Equipment = _interopRequireDefault(require("./models/migrations/Equipment"));

var _Emergency = _interopRequireDefault(require("./models/migrations/Emergency"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var server = _App["default"].listen(4080);

var io = (0, _socket["default"])(server);
console.log("Server lisen port ", 4080);

_AppMqtt["default"].on('connect', function () {
  console.log("Comunicaci√≥n Mqtt Establecida Correctamente");
});

_AppMqtt["default"].subscribe('Panel/#');

io.on("connection", function (socket) {
  _AppMqtt["default"].on('message', function (topic, message) {
    console.log(message.toString());
    var url = topic.toString();
    var id = url.substring(6, 22);
    var opcode = url.substring(23, url.length);
    console.log(opcode);
    console.log(id);
    var data = [];
    var response = [];

    switch (opcode) {
      case "STATUS":
        data = JSON.parse(message);
        data.ip = _ip["default"].toString(_base64url["default"].toBuffer(data.ip));
        console.log(data);
        response = _Users["default"].findOne({
          idEquipment: id
        }).exec().then(function (result) {
          if (result != null) {
            socket.emit("FromAPI", result);
          }
        })["catch"](function (error) {
          var responsex = {
            success: false,
            action: error
          };
          socket.emit("FromAPI", responsex);
        });
        break;

      case "AUDIO":
        //response = message.toString();
        break;

      case "BUTTON":
        data = JSON.parse(message);
        response = _Users["default"].findOne({
          idEquipment: id
        }).exec().then(function (result) {
          var responsex = [];

          if (data.id == result.idControl) {
            _Equipment["default"].findOne({
              id_MCU: id
            }).exec().then(function (result) {
              responsex = {
                success: true,
                emergency: true,
                lat: result.latCenter,
                lng: result.lngCenter
              };

              if (data.bp == 8) {
                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM1"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM3"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM2"), '1');
              } else if (data.bp == 1) {
                socket.emit("FromAPI", responsex);

                _AppMqtt["default"].publish("Panel/".concat(id, "/AUDIO"), '{"fn":"tono2.wav"}');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM3"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM2"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM1"), '1');

                var emergency = new _Emergency["default"]({
                  lat: result.latCenter != null ? result.latCenter.toString() : 'null',
                  lng: result.lngCenter != null ? result.lngCenter.toString() : 'null',
                  from: 'Control RF',
                  state: 'Pendiente'
                });
                emergency.save().then(function (result) {
                  console.log(result);
                })["catch"](function (error) {
                  console.log(error);
                });
              } else if (data.bp == 2) {
                _AppMqtt["default"].publish("Panel/".concat(id, "/AUDIO"), '{"fn":"tono3.wav"}');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM3"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM2"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM1"), '1');
              } else if (data.bp == 4) {
                _AppMqtt["default"].publish("Panel/".concat(id, "/AUDIO"), '{"tmo":0}');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM3"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM2"), '0');

                _AppMqtt["default"].publish("Panel/".concat(id, "/PGM1"), '0');
              }
            })["catch"](function (e) {
              return console.log("erro2");
            });
          } else {
            responsex = {
              success: false,
              emergency: false
            };
          }
        })["catch"](function (error) {
          var responsex = {
            success: false,
            action: error
          };
          return "error";
        })["finally"](function (e) {
          return "saludo";
        });
        break;

      case "CONFIG":
        response = JSON.parse(message.toString());
        break;

      default:
        break;
    }
  });
});
var _default = io;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,