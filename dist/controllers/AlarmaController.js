"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Equipment = _interopRequireDefault(require("../models/migrations/Equipment"));

var _qrWithLogo = _interopRequireDefault(require("qr-with-logo"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _constants = require("../config/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BASEDIR = _path["default"].join(__dirname, '../images/');

var BASEDIR3 = _path["default"].join(__dirname, '../images/team/');

var BASEDIR2 = _path["default"].join(__dirname, '../images/QrCode/');

var AlarmaController = /*#__PURE__*/function () {
  function AlarmaController() {
    _classCallCheck(this, AlarmaController);
  }

  _createClass(AlarmaController, null, [{
    key: "Index",
    value: function Index(req, res) {
      _Equipment["default"].find().exec().then(function (result) {
        res.status(200).json({
          success: true,
          data: {
            alarmas: result,
            numAlarms: result.length
          }
        });
      })["catch"](function (e) {
        res.status(500).json({
          success: false,
          data: {
            error: e
          }
        });
      });
    }
  }, {
    key: "Store",
    value: function Store(req, res) {
      var _req$body = req.body,
          equipment_ip = _req$body.equipment_ip,
          equipment_id = _req$body.equipment_id,
          equipment_name = _req$body.equipment_name,
          equipment_num = _req$body.equipment_num;
      var data = JSON.stringify({
        id_MCU: equipment_id
      });
      var path = BASEDIR2 + equipment_id + '.png';

      _fs["default"].unlink(path, function (err) {
        return console.log(err);
      });

      _qrWithLogo["default"].generateQRWithLogo(data, BASEDIR + 'recorteu.png', {}, "PNG", BASEDIR2 + equipment_id + '.png').then(function (result) {
        return console.log("completo");
      })["catch"](function (e) {
        return console.log(e);
      });

      var urlcode = "".concat(_constants.BASEURL, "/QrCode/") + equipment_id + '.png';
      var newAlarma = new _Equipment["default"]({
        ip: equipment_ip,
        id_MCU: equipment_id,
        name: equipment_name,
        numEquipment: equipment_num,
        urlqr: urlcode
      });
      newAlarma.save().then(function (result) {
        _Equipment["default"].find().exec().then(function (result) {
          res.json({
            success: true,
            data: {
              alarmas: result,
              numAlarms: result.length,
              message: "Se registro correctamente la alarma"
            }
          });
        });
      })["catch"](function (e) {
        return res.json({
          success: false,
          error: e
        });
      });
    }
  }, {
    key: "InternalStore",
    value: function InternalStore(req) {
      var ip = req.ip,
          id_MCU = req.id_MCU,
          index = req.index;
      var data = JSON.stringify({
        id_MCU: id_MCU
      });
      var path = BASEDIR2 + id_MCU + '.png';

      _fs["default"].unlink(path, function (err) {
        return console.log(err);
      });

      _qrWithLogo["default"].generateQRWithLogo(data, BASEDIR + 'recorteu.png', {}, "PNG", BASEDIR2 + id_MCU + '.png').then(function (result) {
        return console.log("completo");
      })["catch"](function (e) {
        return console.log(e);
      });

      var urlcode = "".concat(_constants.BASEURL, "/QrCode/") + id_MCU + '.png';
      var newAlarma = new _Equipment["default"]({
        ip: ip,
        id_MCU: id_MCU,
        name: ip,
        numEquipment: index,
        urlqr: urlcode
      });
      newAlarma.save().then(function (result) {
        console.log(result);
      })["catch"](function (e) {
        console.log(e);
      });
    }
  }, {
    key: "Edit",
    value: function Edit(req, res) {
      _Equipment["default"].findById(req.params.id).exec().then(function (result) {
        result.ip = req.body.equipment_ip, result.id_MCU = req.body.equipment_id, result.name = req.body.equipment_name, result.numEquipment = req.body.equipment_num, result.save().then(function (result) {
          res.json({
            success: true,
            data: {
              message: 'success',
              code: result
            }
          });
        })["catch"](function (error) {
          res.json({
            success: false,
            data: {
              message: 'error',
              code: error
            }
          });
        });
      })["catch"](function (error) {
        res.json({
          success: false,
          data: {
            message: 'error',
            code: error
          }
        });
      });
    }
  }, {
    key: "Update",
    value: function Update(req, res) {
      var solicitud = JSON.parse(JSON.stringify(req.body));

      _Equipment["default"].findOne({
        id_MCU: solicitud.id_MCU
      }).exec().then(function (result) {
        result.name = solicitud.name;
        result.latCenter = solicitud.latitude;
        result.lngCenter = solicitud.longitude;
        result.state = "conectado";
        result.save();
        console.log(result);
        res.status(200).json({
          success: true,
          data: "completo"
        });
      })["catch"](function (error) {
        console.log(error);
        res.status(500).json({
          success: false,
          data: error
        });
      });
    }
  }, {
    key: "Destroy",
    value: function Destroy(req, res) {
      _Equipment["default"].findByIdAndDelete(req.params.id).exec().then(function (result) {
        res.json({
          success: true,
          data: {
            message: 'success',
            code: result
          }
        });
      })["catch"](function (error) {
        res.json({
          success: false,
          data: {
            message: 'error',
            code: error
          }
        });
      });
    }
  }]);

  return AlarmaController;
}();

var _default = AlarmaController;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,